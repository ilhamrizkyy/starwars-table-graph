{"version":3,"sources":["components/TableContent.js","components/Table.js","components/TableWrapper.js","App.js","reportWebVitals.js","index.js"],"names":["TableContent","className","to","Button","variant","PeopleTable","columns","data","peopleList","isLoading","controlledPageCount","pageCount","fetchPeopleList","useTable","manualPagination","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","gotoPage","nextPage","previousPage","pageOptions","state","pageIndex","pageSize","useEffect","map","headerGroup","headerIndex","getHeaderGroupProps","key","headers","column","columnIndex","getHeaderProps","render","row","rowIndex","getRowProps","cells","cell","cellIndex","disabled","onClick","length","count","height","width","TableAndGraph","useState","setPeopleList","setIsLoading","setPageCount","chartData","setChartData","useCallback","a","charName","charHeight","charMass","axios","get","response","results","localStorage","setItem","JSON","stringify","Math","ceil","dataObj","push","name","parseInt","mass","labels","datasets","label","backgroundColor","borderWidth","console","log","fetchPeople","useMemo","Header","accessor","options","responsive","scales","yAxes","ticks","autoSkip","maxTicksLimit","beginAtZero","gridLines","display","xAxes","TableWrapper","history","useHistory","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6809c240.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\n\nimport './TableContent.css';\n\nconst TableContent = () => {\n    return (\n        <div className = 'content-button'>\n            <NavLink to = '/starwars-table-graph/table'><Button variant=\"outline-warning\"> Show Starwars Table and Graph</Button></NavLink>\n        </div>\n    )\n}\n\nexport default TableContent;\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport axios from 'axios';\nimport { useTable, usePagination } from 'react-table';\nimport { Bar } from \"react-chartjs-2\";\n\nimport './Table.css';\n\nconst TableAndGraph = () => {\n    const [peopleList, setPeopleList] = useState([])\n    const [isLoading, setIsLoading] = useState(false)\n    const [pageCount, setPageCount] = useState(0)\n    const [chartData, setChartData] = useState({})\n\n    let fetchPeopleList = useCallback(({ pageIndex }) => {\n        let fetchPeople = async (pageIndex) => {\n            let charName = [];\n            let charHeight = [];\n            let charMass = [];\n            try {\n                setIsLoading(true)\n                let response = await axios.get(`https://swapi.dev/api/people/?page=${pageIndex + 1}`)\n                setPeopleList(response.data.results)\n                localStorage.setItem('data', JSON.stringify(response))\n                let count = response.data.count\n                var pagesize = 10\n                let pageCount = Math.ceil(count / pagesize)\n                setPageCount(pageCount)\n                setIsLoading(false)\n                for (const dataObj of response.data.results) {\n                    charName.push(dataObj.name);\n                    charHeight.push(parseInt(dataObj.height));\n                    charMass.push(parseInt(dataObj.mass));\n                }\n                setChartData({\n                    labels: charName,\n                    datasets: [\n                        {\n                            label: \"Character Height\",\n                            data: charHeight,\n                            backgroundColor: [\"rgba(75, 192, 192, 0.6)\", \"rgba(75, 192, 192, 0.6)\", \"rgba(75, 192, 192, 0.6)\",\n                                \"rgba(75, 192, 192, 0.6)\", \"rgba(75, 192, 192, 0.6)\", \"rgba(75, 192, 192, 0.6)\", \"rgba(75, 192, 192, 0.6)\"\n                                , \"rgba(75, 192, 192, 0.6)\", \"rgba(75, 192, 192, 0.6)\", \"rgba(75, 192, 192, 0.6)\"],\n                            borderWidth: 4\n                        },\n                        {\n                            label: \"Character Mass\",\n                            data: charMass,\n                            backgroundColor: [\"rgba(122, 52, 120, 0.6)\", \"rgba(122, 52, 120, 0.6)\",\n                                \"rgba(122, 52, 120, 0.6)\", \"rgba(122, 52, 120, 0.6)\", \"rgba(122, 52, 120, 0.6)\",\n                                \"rgba(122, 52, 120, 0.6)\", \"rgba(122, 52, 120, 0.6)\", \"rgba(122, 52, 120, 0.6)\", \"rgba(122, 52, 120, 0.6)\",\n                                \"rgba(122, 52, 120, 0.6)\", \"rgba(122, 52, 120, 0.6)\"],\n                            borderWidth: 4\n                        },\n                    ]\n                });\n            } catch (err) {\n                console.log('Error:', err)\n            }\n            console.log(charName, charHeight, charMass)\n        }\n        fetchPeople(pageIndex)\n    }, [])\n\n    let columns = useMemo(\n        () => [\n            {\n                Header: 'Name',\n                accessor: 'name',\n            },\n            {\n                Header: 'Height (cm)',\n                accessor: 'height',\n            },\n            {\n                Header: 'Mass (Kg)',\n                accessor: 'mass',\n            },\n            {\n                Header: 'Hair Color',\n                accessor: 'hair_color',\n            },\n            {\n                Header: 'Skin Color',\n                accessor: 'skin_color',\n            },\n        ],\n        [],\n    )\n\n    return (\n        <div className=\"content-wrapper\">\n            <PeopleTable\n                columns={columns}\n                fetchPeopleList={fetchPeopleList}\n                isLoading={isLoading}\n                pageCount={pageCount}\n                peopleList={peopleList}\n            />\n            <div className=\"chart-wrapper\">\n                <Bar\n                    data={chartData}\n                    options={{\n                        responsive: true,\n                        scales: {\n                            yAxes: [\n                                {\n                                    ticks: {\n                                        autoSkip: true,\n                                        maxTicksLimit: 10,\n                                        beginAtZero: true\n                                    },\n                                    gridLines: {\n                                        display: true\n                                    }\n                                },\n                            ],\n                            xAxes: [\n                                {\n                                    gridLines: {\n                                        display: false\n                                    }\n                                }\n                            ]\n                        }\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n\nconst PeopleTable = ({ columns, peopleList: data, isLoading, pageCount: controlledPageCount, fetchPeopleList }) => {\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        page,\n        prepareRow,\n        canPreviousPage,\n        canNextPage,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        pageOptions,\n        state: { pageIndex, pageSize },\n    } = useTable(\n        {\n            columns,\n            data,\n            manualPagination: true,\n            pageCount: controlledPageCount\n        },\n        usePagination\n    )\n\n    useEffect(() => {\n        fetchPeopleList({ pageIndex, pageSize })\n    }, [fetchPeopleList, pageIndex, pageSize])\n\n    return (\n        <div className='people-table'>\n            <table {...getTableProps()}>\n                <thead>\n                    {headerGroups.map((headerGroup, headerIndex) => (\n                        <tr\n                            {...headerGroup.getHeaderGroupProps()}\n                            key={headerIndex}\n                        >\n                            {headerGroup.headers.map((column, columnIndex) => {\n                                return (\n                                    <th key={columnIndex} {...column.getHeaderProps()}>\n                                        {column.render('Header')}\n                                    </th>\n                                )\n                            })}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {!isLoading && (\n                        page.map((row, rowIndex) => {\n                            prepareRow(row)\n                            return (\n                                <tr {...row.getRowProps()} key={rowIndex}>\n                                    {row.cells.map((cell, cellIndex) => {\n                                        return (\n                                            <td key={cellIndex}>\n                                                {cell.render('Cell')}\n                                            </td>\n                                        )\n                                    })}\n                                </tr>\n                            )\n                        })\n                    )}\n                </tbody>\n            </table>\n            {\n                !isLoading &&\n                <div className='pagination'>\n                    <button disabled={!canPreviousPage} onClick={() => gotoPage(0)}>\n                        {'First'}\n                    </button>{' '}\n                    <button disabled={!canPreviousPage} onClick={() => previousPage()}>\n                        {'Previous'}\n                    </button>{' '}\n                    <button disabled={!canNextPage} onClick={() => nextPage()}>\n                        {'Next'}\n                    </button>{' '}\n                    <button disabled={!canNextPage} onClick={() => gotoPage(pageCount - 1)}>\n                        {'Last'}\n                    </button>{' '}\n                    <span>\n                        Page{' '}\n                        <strong>\n                            {pageIndex + 1} of {pageOptions.length}\n                        </strong>{' '}\n                    </span>\n                </div>\n            }\n            {\n                isLoading && <Skeleton\n                    count={10} height={50}\n                    width={'100%'}\n                />\n            }\n        </div>\n    )\n}\n\nexport default TableAndGraph","import React from 'react';\nimport { Route, useHistory, Switch } from 'react-router-dom';\n\nimport TableAndGraph from './Table';\nimport './TableWrapper.css';\n\nconst TableWrapper = () => {\n    const history = useHistory()\n    const handleBack = () => {\n        history.push('/starwars-table-graph/')\n    }\n    \n    return (\n        <>  \n            <div className = 'button-wrapper'>\n                <button className = 'go-back' onClick = { handleBack }>\n                    Back\n                </button>\n            </div>      \n            <Switch>\n                <Route exact path = '/starwars-table-graph/table'><TableAndGraph></TableAndGraph></Route>\n            </Switch>\n        </>\n    )\n}\n\nexport default TableWrapper\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport TableContent from './components/TableContent'\nimport TableWrapper from './components/TableWrapper';\n\nfunction App() {\n  return (\n    <Router>\n      <div className='app-container'>\n        <div className='content-title'>React Starwars Table</div>\n        <div className='content-subtitle'>Powered By Swapi API https://swapi.dev/</div>\n        <Switch>\n          <Route exact path='/starwars-table-graph'>\n            <TableContent />\n          </Route>\n          <TableWrapper />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}